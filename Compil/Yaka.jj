/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	création : 13 février 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)


package Compil;


import Compil.Expression.*;


public class Yaka {
	public static Declaration declaration;
	public static TabIdent tabIdent;
	public static Expression expression;
	public static int type; //prend ses valeurs dans YakaConstants
	public static YVM yvm;

  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
        yvm = new YVM(args[args.length-1]+".yvm");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      declaration = new Declaration();
      expression = new Expression();
      tabIdent = new TabIdent();
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+ msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAMME> <ident>	{yvm.debutProg();}
   bloc()
   <FPROGRAMME> {yvm.finProg();}
}

void bloc() : {}{
 (declConst())*
 (declVar())* {yvm.ouvrePrinc();}	
   suiteExpr() 
}

void declConst() : {}{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}{
  <ident> "=" valConst()
}

void valConst() : {}{
  <entier> 	 {declaration.declConst(YakaTokenManager.identLu, YakaConstants.ENTIER, YakaTokenManager.entierLu);}
 | <ident>	 
 | <VRAI> 	 {declaration.declConst(YakaTokenManager.identLu, YakaConstants.BOOLEEN, YakaConstants.VRAI);}
 | <FAUX> 	 {declaration.declConst(YakaTokenManager.identLu, YakaConstants.BOOLEEN, YakaConstants.FAUX);}
}


void declVar() : {} {
  <VAR> type()	
  <ident> {declaration.declVar(YakaTokenManager.identLu, type); }		
  ("," 
      <ident>  {declaration.declVar(YakaTokenManager.identLu, type);}
  )* ";"
	
}


void type() :{} {
   <ENTIER>  {type = YakaConstants.ENTIER;}			
 | <BOOLEEN> {type = YakaConstants.BOOLEEN;}	
}
/*
 * Syntaxe des instructions.
 */
void suiteExpr() : {}
{	
	expression() { expression.evaluate();}
	(";" (expression() { expression.evaluate();})? )*
	//(expression()
	//(";" (expression())? )*)?
}



/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() 
  )? 
}



void simpleExpr() : {}
{
   terme() 
   (opAdd()
   terme()	
   )* 
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur()	
  )*
}
void facteur() : {}
{  
	primaire() 
	|  opNeg() primaire() 
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {Boolean b = false;} { 
  <entier> 	{expression.addImmediate(YakaConstants.ENTIER); yvm.lireImmediat(YakaTokenManager.entierLu);}	
 | <ident> 	{b = true;} //Ce bloc est exécuté avant la sauvegarde de identLu, donc l'ajout de lident est exécuté plus bas
 | <VRAI> 	{expression.addImmediate(YakaConstants.BOOLEEN); yvm.lireImmediat(YakaConstants.VRAI);}	
 | <FAUX> 	{expression.addImmediate(YakaConstants.BOOLEEN); yvm.lireImmediat(YakaConstants.FAUX);}	
 {if(b){expression.addIdent(YakaTokenManager.identLu); yvm.lireConstOuVar(YakaTokenManager.identLu);}} //cas ou on lit un ident
}

void opRel() : {} {
   "=" 		{expression.addOp(TypeOp.ARLO);}
 | "<>" 	{expression.addOp(TypeOp.ARLO);yvm.lireDiff();}
 | "<" 		{expression.addOp(TypeOp.ARLO);yvm.lireInf();}
 | "<=" 	{expression.addOp(TypeOp.ARLO);yvm.lireInfEg();}
 | ">" 		{expression.addOp(TypeOp.ARLO);yvm.lireSup();}
 | ">=" 	{expression.addOp(TypeOp.ARLO);yvm.lireSupEg();}
} 

void opAdd() : {}
{
    "+"		{expression.addOp(TypeOp.ARITH2);yvm.lireAdd();}
  |  "-"  	{expression.addOp(TypeOp.ARITH2);yvm.lireSous();}
  | <OU> 	{expression.addOp(TypeOp.LOGIQUE2);yvm.lireOu();}
}

void opMul() : {}
{
  "*"		{expression.addOp(TypeOp.ARITH2);yvm.lireMul();}
  | "/"		{expression.addOp(TypeOp.ARITH2);yvm.lireDiv();}
  | <ET>	{expression.addOp(TypeOp.LOGIQUE2);yvm.lireEt();}
} 

void opNeg() : {}
{ 
   "-" 		{expression.addOp(TypeOp.ARITH1);yvm.lireNeg();}
 | <NON>	{expression.addOp(TypeOp.LOGIQUE1);yvm.lireNon();}
}


